sortings:-arranging the elements in the ascending order or descinding order.

selection sort:-

#include <stdio.h>
int main(){
    int i,j,n,a[100];
    printf("enter number of sorted array");
    scanf("%d",&n);
    for(i=0;i<n;i++){
        scanf("%d",&a[i]);
    }
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(a[i]>a[j])
            {
                int temp=a[j];
                a[j]=a[i];
                a[i]=temp;
            }
        }
    }
    for(i=0;i<n;i++){
        printf("%d ",a[i]);
    }
}

------------------------------------------------------------------------------------------------------------------------------
quick sort:-

def quicksort(arr):
    if len(arr) <= 1:
        return arr

    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
my_list = [3, 6, 8, 10, 1, 2, 1]
sorted_list = quicksort(my_list)
print(sorted_list)

--------------------------------------------------------------------------------------------------------------------------------------------
merge sort:-
 
def merge_sort(arr):                                      
    if len(arr) <= 1:                                     
        return arr                                        
    middle = len(arr) // 2                                
    left_half = arr[:middle]                              
    right_half = arr[middle:]                             
    left_half = merge_sort(left_half)                     
    right_half = merge_sort(right_half)                   
    return merge(left_half, right_half)                   
def merge(left, right):                                   
    result = []                                           
    left_idx, right_idx = 0, 0                            
                                                          
    while left_idx < len(left) and right_idx < len(right):
        if left[left_idx] < right[right_idx]:             
            result.append(left[left_idx])                 
            left_idx += 1                                 
        else:                                             
            result.append(right[right_idx])               
            right_idx += 1                                
    result.extend(left[left_idx:])                        
    result.extend(right[right_idx:])                      
    return result                                         
my_list = [3, 6, 8, 10, 1, 2, 1]                          
sorted_list = merge_sort(my_list)                         
print(sorted_list)   
-----------------------------------------------------------------------------------------------------------------------------------------
merge sort with inversions:-

def merge_sort_and_count_inversions(arr):
    if len(arr) <= 1:
        return arr, 0
    middle = len(arr) // 2
    left_half = arr[:middle]
    right_half = arr[middle:]
    left_half, left_inversions = merge_sort_and_count_inversions(left_half)
    right_half, right_inversions = merge_sort_and_count_inversions(right_half)
    merged_arr, merge_inversions = merge_and_count_inversions(left_half, right_half)
    total_inversions = left_inversions + right_inversions + merge_inversions
    return merged_arr, total_inversions
def merge_and_count_inversions(left, right):
    result = []
    left_idx, right_idx = 0, 0
    inversions = 0
    while left_idx < len(left) and right_idx < len(right):
        if left[left_idx] <= right[right_idx]:
            result.append(left[left_idx])
            left_idx += 1
        else:
            result.append(right[right_idx])
            right_idx += 1
            inversions += len(left) - left_idx
    result.extend(left[left_idx:])
    result.extend(right[right_idx:])
    return result, inversions
my_list = [6,3,9,2,1]
sorted_list, inversions = merge_sort_and_count_inversions(my_list)
print("Sorted list:", sorted_list)
print("Number of inversions:", inversions)
---------------------------------------------------------------------------------------------------------------------------------------------------------------
insertion sort:-

def insertion_sort(arr):
    for i in range(1, len(arr)):
        j = i
        while arr[j] < arr[j-1] and j > 0:
            arr[j-1], arr[j] = arr[j], arr[j-1]
            j = j-1
    return arr
    
    
arr = [7,-1,0,5,2]
ans = insertion_sort(arr)
print(ans)
