count sort:- Counting Sort is a sorting algorithm that works well for sorting integers within a specific range. It has a time complexity of O(n + k).

def counting_sort(arr):
    max_val = max(arr)
    min_val = min(arr)
    range_of_values = max_val - min_val + 1
    count = [0] * range_of_values
    for num in arr:
        count[num - min_val] += 1
    sorted_arr = []
    for i in range(range_of_values):
        sorted_arr.extend([i + min_val] * count[i])
    return sorted_arr
arr = [4, 2, 2, 8, 3, 3, 1]
sorted_arr = counting_sort(arr)
print("Sorted array:", sorted_arr)

-------------------------------------------------------------------------------------------------------------------------------------------------------------
searching techiques:-

linear search:-

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  
    return -1  
arr = [2, 4, 6, 8, 10, 12, 14]
target = 8
result = linear_search(arr, target)

if result != -1:
    print(f"Target {target} found at index {result}")
else:
    print(f"Target {target} not found in the array")
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
binary search:-

def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = (left + right) // 2  

        if arr[mid] == target:
            return mid  
        elif arr[mid] < target:
            left = mid + 1  
        else:
            right = mid - 1  
    return -1  
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 7
result = binary_search(arr, target)

if result != -1:
    print(f"Target {target} found at index {result}")
else:
    print(f"Target {target} not found in the array")
